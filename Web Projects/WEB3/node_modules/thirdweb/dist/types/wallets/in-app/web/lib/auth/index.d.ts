import type { ThirdwebClient } from "../../../../../client/client.js";
import type { AuthArgsType, GetAuthenticatedUserParams, PreAuthArgsType, SocialAuthArgsType } from "../../../core/authentication/types.js";
import type { Ecosystem } from "../../../core/wallet/types.js";
/**
 * Retrieves the authenticated user email for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getUserEmail } from "thirdweb/wallets/in-app";
 *
 * const email = await getUserEmail({ client });
 * console.log(email);
 * ```
 * @wallet
 */
export declare function getUserEmail(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Retrieves the authenticated user phone number for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.
 * @example
 * ```ts
 * import { getUserPhoneNumber } from "thirdweb/wallets/embedded";
 *
 * const phoneNumber = await getUserPhoneNumber({ client });
 * console.log(phoneNumber);
 * ```
 * @wallet
 */
export declare function getUserPhoneNumber(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Pre-authenticates the user based on the provided authentication strategy.
 * Use this function to send a verification code to the user's email or phone number.
 * @param args - The arguments required for pre-authentication.
 * @returns A promise that resolves to the pre-authentication result.
 * @throws An error if the provided authentication strategy doesn't require pre-authentication.
 * @example
 * ```ts
 * import { preAuthenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await preAuthenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 * });
 * ```
 * @wallet
 */
export declare function preAuthenticate(args: PreAuthArgsType): Promise<void>;
/**
 * Authenticates the user based on the provided authentication arguments.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await authenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 *  verificationCode: "123456",
 * });
 * ```
 * @wallet
 */
export declare function authenticate(args: AuthArgsType): Promise<import("../../../core/authentication/types.js").AuthStoredTokenWithCookieReturnType>;
/**
 * Authenticates the user based on the provided authentication arguments using a redirect.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticateWithRedirect } from "thirdweb/wallets/in-app";
 *
 * const result = await authenticateWithRedirect({
 *  client,
 *  strategy: "google",
 *  mode: "redirect",
 *  redirectUrl: "https://example.org",
 * });
 * ```
 * @wallet
 */
export declare function authenticateWithRedirect(args: SocialAuthArgsType & {
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
}): Promise<void>;
/**
 * Connects a new profile (and new authentication method) to the current user.
 *
 * Requires a connected in-app or ecosystem account.
 *
 * **When a profile is linked to the account, that profile can then be used to sign into the same account.**
 *
 * @param auth - The authentications options to add the new profile.
 * @returns A promise that resolves to the currently linked profiles when the connection is successful.
 * @throws If the connection fails, if the profile is already linked to the account, or if the profile is already associated with another account.
 *
 * @example
 * ```ts
 * import { linkProfile } from "thirdweb/wallets";
 *
 * await linkProfile({ client, strategy: "discord" });
 * ```
 * @wallet
 */
export declare function linkProfile(args: AuthArgsType): Promise<import("../../../core/authentication/types.js").Profile[]>;
/**
 * Gets the linked profiles for the connected in-app or ecosystem wallet.
 *
 * @returns An array of accounts user profiles linked to the connected wallet.
 *
 * @example
 * ```ts
 * import { getProfiles } from "thirdweb/wallets";
 *
 * const profiles = await getProfiles({
 *  client,
 * });
 *
 * console.log(profiles[0].type); // will be "email", "phone", "google", "discord", etc
 * console.log(profiles[0].details.email);
 * console.log(profiles[0].details.phone);
 * ```
 *
 * ### Getting profiles for a ecosystem user
 *
 * ```ts
 * import { getProfiles } from "thirdweb/wallets/in-app";
 *
 * const profiles = await getProfiles({
 *  client,
 *  ecosystem: {
 *    id: "ecosystem.your-ecosystem-id",
 *  },
 * });
 * ```
 * @wallet
 */
export declare function getProfiles(args: GetAuthenticatedUserParams): Promise<import("../../../core/authentication/types.js").Profile[]>;
//# sourceMappingURL=index.d.ts.map