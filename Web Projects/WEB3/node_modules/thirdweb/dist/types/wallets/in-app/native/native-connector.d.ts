import type { ThirdwebClient } from "../../../client/client.js";
import type { Account } from "../../interfaces/wallet.js";
import type { AuthArgsType, AuthLoginReturnType, AuthStoredTokenWithCookieReturnType, GetUser, LogoutReturnType, MultiStepAuthArgsType, MultiStepAuthProviderType, SingleStepAuthArgsType } from "../core/authentication/types.js";
import type { InAppConnector } from "../core/interfaces/connector.js";
import type { Ecosystem } from "../core/wallet/types.js";
type NativeConnectorOptions = {
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
    passkeyDomain?: string;
};
export declare class InAppNativeConnector implements InAppConnector {
    private client;
    private ecosystem?;
    private passkeyDomain?;
    private localStorage;
    private wallet?;
    constructor(options: NativeConnectorOptions);
    initializeWallet(authToken?: string): Promise<void>;
    getUser(): Promise<GetUser>;
    getAccount(): Promise<Account>;
    preAuthenticate(args: MultiStepAuthProviderType): Promise<void>;
    authenticate(params: AuthArgsType): Promise<AuthStoredTokenWithCookieReturnType>;
    connect(params: MultiStepAuthArgsType | SingleStepAuthArgsType): Promise<AuthLoginReturnType>;
    private passkeyAuth;
    deleteActiveAccount(): Promise<boolean>;
    logout(): Promise<LogoutReturnType>;
    linkProfile(args: AuthArgsType): Promise<import("../core/authentication/types.js").Profile[]>;
    getProfiles(): Promise<import("../core/authentication/types.js").Profile[]>;
}
export {};
//# sourceMappingURL=native-connector.d.ts.map