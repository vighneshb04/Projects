"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAddress = resolveAddress;
const polygon_js_1 = require("../../../chains/chain-definitions/polygon.js");
const contract_js_1 = require("../../../contract/contract.js");
const address_js_1 = require("../../../utils/address.js");
const withCache_js_1 = require("../../../utils/promise/withCache.js");
const getMany_js_1 = require("../__generated__/UnstoppableDomains/read/getMany.js");
const namehash_js_1 = require("../__generated__/UnstoppableDomains/read/namehash.js");
const consts_js_1 = require("../consts.js");
/**
 * Resolve an Unstoppable-Domain domain to an Ethereum address
 * @param options - The options for resolving an UD domain
 * @returns The Ethereum address associated with the domain name. [Learn more](https://docs.unstoppabledomains.com/reverse-resolution/)
 * @example
 *
 * ### Basic usage
 * ```ts
 * import { resolveAddress } from "thirdweb/extension/unstoppable-domains";
 *
 * const address = await resolveAddress({
 *   client,
 *   name: "thirdweb.crypto",
 * });
 * ```
 *
 * ### Custom resolver
 * By default this extension will try to resolve the name on Polygon mainnet,
 * you can decide to customize the resolver contract by specifying `resolverAddress` and `resolverChain`
 * ```ts
 * import { ethereum } from "thirdweb/chains";
 *
 * const address = await resolveAddress({
 *   client,
 *   name: "thirdweb.crypto",
 *   resolverAddress: "0x...",
 *   resolverChain: ethereum,
 * });
 * ```
 *
 * @extension UNSTOPPABLE-DOMAINS
 */
async function resolveAddress(options) {
    const { client, name, resolverAddress, resolverChain } = options;
    if ((0, address_js_1.isAddress)(name)) {
        return (0, address_js_1.getAddress)(name);
    }
    return (0, withCache_js_1.withCache)(async () => {
        const contract = (0, contract_js_1.getContract)({
            client,
            chain: resolverChain || polygon_js_1.polygon,
            address: resolverAddress || consts_js_1.UD_POLYGON_MAINNET,
        });
        // Get namehash
        const possibleTokenId = await (0, namehash_js_1.namehash)({
            contract,
            labels: name.split("."),
        });
        // Resolve ETH address from the tokenId
        const resolved = await (0, getMany_js_1.getMany)({
            contract,
            tokenId: possibleTokenId,
            // note that you can also retrieve the (BTC, SOL, etc.) address by using "crypto.<symbol>.address" (should that become useful one day)
            keys: ["crypto.ETH.address"],
        });
        const possibleETHAddress = resolved[0];
        if (!possibleETHAddress) {
            throw new Error(`Could not retrieve any ETH address associated with domain name: ${name}. Make sure you have set the base EVM address for your domain here: https://unstoppabledomains.com/manage?page=crypto&domain=<your-domain>`);
        }
        return possibleETHAddress;
    }, {
        cacheKey: `unstoppable-domain:addr:${resolverChain?.id || 1}:${name}`,
        // 1min cache
        cacheTime: 60 * 1000,
    });
}
//# sourceMappingURL=resolveAddress.js.map