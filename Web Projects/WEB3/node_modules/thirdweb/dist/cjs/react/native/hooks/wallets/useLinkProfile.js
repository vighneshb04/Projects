"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLinkProfile = useLinkProfile;
const react_query_1 = require("@tanstack/react-query");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const index_js_1 = require("../../../../wallets/in-app/web/lib/auth/index.js");
const useAdminWallet_js_1 = require("../../../core/hooks/wallets/useAdminWallet.js");
/**
 * Links a web2 or web3 profile to the connected in-app or ecosystem account.
 *
 * **When a profile is linked to the account, that profile can then be used to sign into the same account.**
 *
 * @example
 *
 * ### Linking a social profile
 *
 * ```jsx
 * import { useLinkProfile } from "thirdweb/react";
 *
 * const { mutate: linkProfile } = useLinkProfile();
 *
 * const onClick = () => {
 *   linkProfile({
 *     client,
 *     strategy: "discord", // or "google", "x", "telegram", etc
 *   });
 * };
 * ```
 *
 * ### Linking an email
 *
 * ```jsx
 * import { useLinkProfile } from "thirdweb/react";
 * import { preAuthenticate } from "thirdweb/wallets";
 *
 * const { mutate: linkProfile } = useLinkProfile();
 *
 * // send a verification email first
 * const sendEmail = async () => {
 *   const email = await preAuthenticate({
 *     client,
 *     strategy: "email",
 *     email: "john.doe@example.com",
 *   });
 * };
 *
 * // then link the profile with the verification code
 * const onClick = (code: string) => {
 *   linkProfile({
 *     client,
 *     strategy: "email",
 *     email: "john.doe@example.com",
 *     verificationCode: code,
 *   });
 * };
 * ```
 *
 * The same process can be used for phone and email, simply swap out the `strategy` parameter.
 *
 * ### Linking a wallet
 *
 * ```jsx
 * import { useLinkProfile } from "thirdweb/react";
 *
 * const { mutate: linkProfile } = useLinkProfile();
 *
 * const onClick = () => {
 *   linkProfile({
 *     client,
 *     strategy: "wallet",
 *     wallet: createWallet("io.metamask"), // autocompletion for 400+ wallet ids
 *     chain: sepolia, // any chain works, needed for SIWE signature
 *   });
 * };
 * ```
 *
 * @wallet
 */
function useLinkProfile() {
    const wallet = (0, useAdminWallet_js_1.useAdminWallet)();
    return (0, react_query_1.useMutation)({
        mutationKey: ["profiles"],
        mutationFn: async (options) => {
            const ecosystem = wallet && (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)
                ? { id: wallet.id, partnerId: wallet.getConfig()?.partnerId }
                : undefined;
            const optionsWithEcosystem = { ...options, ecosystem };
            return (0, index_js_1.linkProfile)(optionsWithEcosystem);
        },
    });
}
//# sourceMappingURL=useLinkProfile.js.map