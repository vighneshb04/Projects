"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShardedWallet = void 0;
const fetchers_js_1 = require("../api/fetchers.js");
const middleware_js_1 = require("../auth/middleware.js");
const local_js_1 = require("../storage/local.js");
const retrieval_js_1 = require("./retrieval.js");
class ShardedWallet {
    constructor(args) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = args.client;
        this.storage = args.storage;
    }
    async postWalletSetUp(authResult) {
        await (0, middleware_js_1.postAuth)({
            storedToken: authResult.storedToken,
            client: this.client,
            storage: this.storage,
            encryptionKey: authResult.encryptionKey,
        });
    }
    async getUserWalletStatus() {
        const localData = await (0, local_js_1.getWalletUserDetails)(this.client.clientId);
        const userStatus = await (0, fetchers_js_1.fetchUserDetails)({
            client: this.client,
            email: localData?.email,
            storage: this.storage,
        });
        if (userStatus.status === "Logged In, Wallet Initialized") {
            return {
                status: userStatus.status,
                authDetails: userStatus.storedToken.authDetails,
                walletAddress: userStatus.walletAddress,
                account: await this.getAccount(),
            };
        }
        if (userStatus.status === "Logged In, New Device") {
            return {
                status: "Logged In, New Device",
                authDetails: userStatus.storedToken.authDetails,
                walletAddress: userStatus.walletAddress,
            };
        }
        if (userStatus.status === "Logged In, Wallet Uninitialized") {
            return {
                status: "Logged In, Wallet Uninitialized",
                authDetails: userStatus.storedToken.authDetails,
            };
        }
        // Logged out
        return { status: "Logged Out" };
    }
    getAccount() {
        return (0, retrieval_js_1.getExistingUserAccount)({
            client: this.client,
            storage: this.storage,
        });
    }
}
exports.ShardedWallet = ShardedWallet;
//# sourceMappingURL=sharded-wallet.js.map