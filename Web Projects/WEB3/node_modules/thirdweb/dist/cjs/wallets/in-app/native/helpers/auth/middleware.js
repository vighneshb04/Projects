"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postAuth = postAuth;
const errors_js_1 = require("../errors.js");
const local_js_1 = require("../storage/local.js");
const creation_js_1 = require("../wallet/creation.js");
const recoveryCode_js_1 = require("../wallet/recoveryCode.js");
const retrieval_js_1 = require("../wallet/retrieval.js");
async function postAuth({ storedToken, client, encryptionKey, storage, }) {
    if (storedToken.shouldStoreCookieString) {
        await storage.saveAuthCookie(storedToken.cookieString);
    }
    await (0, local_js_1.setWallerUserDetails)({
        clientId: client.clientId,
        userId: storedToken.authDetails.userWalletId,
        email: "email" in storedToken.authDetails
            ? storedToken.authDetails.email
            : "phoneNumber" in storedToken.authDetails
                ? storedToken.authDetails.phoneNumber
                : undefined,
    });
    if (storedToken.isNewUser) {
        const _recoveryCode = await getRecoveryCode({
            storedToken,
            client,
            recoveryCode: encryptionKey,
            storage,
        });
        if (!_recoveryCode) {
            throw new Error(errors_js_1.ErrorMessages.missingRecoveryCode);
        }
        await (0, creation_js_1.setUpNewUserWallet)({
            client,
            recoveryCode: _recoveryCode,
            storage,
        });
    }
    else {
        try {
            // existing device share
            await (0, local_js_1.getDeviceShare)(client.clientId);
        }
        catch {
            const _recoveryCode = await getRecoveryCode({
                storedToken,
                client,
                recoveryCode: encryptionKey,
                storage,
            });
            if (!_recoveryCode) {
                throw new Error(errors_js_1.ErrorMessages.missingRecoveryCode);
            }
            try {
                await (0, retrieval_js_1.setUpShareForNewDevice)({
                    client: client,
                    recoveryCode: _recoveryCode,
                    storage,
                });
            }
            catch (error) {
                console.error("Error setting up wallet on device", error);
                throw error;
            }
        }
    }
    return storedToken;
}
async function getRecoveryCode(args) {
    const { storedToken, client, storage, recoveryCode } = args;
    if (storedToken.authDetails.recoveryShareManagement === "AWS_MANAGED") {
        if (storedToken.authProvider === "CustomJWT" ||
            storedToken.authProvider === "CustomAuthEndpoint") {
            if (!recoveryCode) {
                throw new Error(`GetRecoveryCode error: ${errors_js_1.ErrorMessages.missingRecoveryCode}`);
            }
            return recoveryCode;
        }
        try {
            return await (0, recoveryCode_js_1.getCognitoRecoveryPasswordV2)({ client, storage });
        }
        catch {
            return await (0, recoveryCode_js_1.getCognitoRecoveryPasswordV1)({ client, storage }).catch(() => {
                throw new Error("Something went wrong getting cognito recovery code");
            });
        }
    }
    else if (storedToken.authDetails.recoveryShareManagement === "USER_MANAGED") {
        if (recoveryCode) {
            return recoveryCode;
        }
        throw new Error(errors_js_1.ErrorMessages.missingRecoveryCode);
    }
    else {
        throw new Error("Invalid recovery share management option");
    }
}
//# sourceMappingURL=middleware.js.map