"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.socialAuth = socialAuth;
exports.deleteActiveAccount = deleteActiveAccount;
const WebBrowser = require("expo-web-browser");
const getLoginPath_js_1 = require("../../core/authentication/getLoginPath.js");
const fetchers_js_1 = require("../helpers/api/fetchers.js");
const errors_js_1 = require("../helpers/errors.js");
async function socialAuth(args) {
    const { auth, client, ecosystem } = args;
    const loginUrl = (0, getLoginPath_js_1.getLoginUrl)({
        authOption: auth.strategy,
        client,
        mode: "window",
        redirectUrl: auth.redirectUrl,
        ecosystem,
    });
    const result = await WebBrowser.openAuthSessionAsync(loginUrl, auth.redirectUrl, {
        preferEphemeralSession: false,
        showTitle: false,
        enableDefaultShareMenuItem: false,
        enableBarCollapsing: false,
    });
    if (result.type === "cancel") {
        throw new Error("Sign in cancelled");
    }
    if (result.type !== "success") {
        throw new Error(`Can't sign in with ${auth.strategy}: ${result}`);
    }
    const resultURL = new URL(result.url);
    const authResult = resultURL.searchParams.get("authResult");
    const error = resultURL.searchParams.get("error");
    // assume error
    if (error) {
        throw new Error(`Something went wrong: ${error}`);
    }
    if (!authResult) {
        throw new Error("No auth result found");
    }
    return JSON.parse(authResult);
}
async function deleteActiveAccount(options) {
    await (0, fetchers_js_1.verifyClientId)(options.client);
    try {
        return (0, fetchers_js_1.deleteAccount)({
            client: options.client,
            storage: options.storage,
        });
    }
    catch (e) {
        throw new Error((0, errors_js_1.createErrorMessage)("Error deleting the active account", e));
    }
}
//# sourceMappingURL=native-auth.js.map