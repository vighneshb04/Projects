import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Fuse from "fuse.js";
import { useMemo, useState } from "react";
import { FlatList, Image, Linking, ScrollView, StyleSheet, TouchableOpacity, View, } from "react-native";
import walletInfos from "../../../../wallets/__generated__/wallet-infos.js";
import { createWallet } from "../../../../wallets/native/create-wallet.js";
import { useWalletImage, useWalletInfo } from "../../../core/utils/wallet.js";
import { spacing } from "../../design-system/index.js";
import { RNImage } from "../components/RNImage.js";
import { Skeleton } from "../components/Skeleton.js";
import { ThemedInput } from "../components/input.js";
import { Spacer } from "../components/spacer.js";
import { ThemedText } from "../components/text.js";
import { SEARCH_ICON } from "../icons/svgs.js";
export function ExternalWalletsList(props) {
    const { connector, client, theme, externalWallets, onShowAllWallets } = props;
    const connectWallet = (wallet) => {
        connector({
            wallet,
            connectFn: async (chain) => {
                await wallet.connect({
                    client,
                    chain,
                });
                return wallet;
            },
        });
    };
    return (_jsxs(View, { style: styles.container, children: [_jsx(ScrollView, { style: {
                    flex: 1,
                    paddingHorizontal: props.containerType === "modal" ? spacing.lg : 0,
                }, children: _jsxs(View, { style: {
                        flexDirection: "column",
                        gap: spacing.md,
                        paddingBottom: spacing.md,
                    }, children: [externalWallets.map((wallet) => (_jsx(ExternalWalletRow, { wallet: wallet, connectWallet: connectWallet, theme: theme }, wallet.id))), props.showAllWalletsButton && (_jsx(ShowAllWalletsRow, { theme: theme, onPress: onShowAllWallets }))] }) }), _jsx(NewToWallets, { theme: props.theme, containerType: props.containerType })] }));
}
export function AllWalletsList(props) {
    const { connector, client, theme, externalWallets } = props;
    const [searchQuery, setSearchQuery] = useState("");
    const walletsToShow = useMemo(() => {
        const filteredWallets = walletInfos
            .filter((info) => !externalWallets.find((wallet) => wallet.id === info.id))
            .filter((info) => info.hasMobileSupport);
        const fuse = new Fuse(filteredWallets, {
            keys: ["name"],
            threshold: 0.3,
        });
        return searchQuery
            ? fuse.search(searchQuery).map((result) => result.item.id)
            : filteredWallets.map((info) => info.id);
    }, [externalWallets, searchQuery]);
    const connectWallet = (wallet) => {
        connector({
            wallet,
            connectFn: async (chain) => {
                await wallet.connect({
                    client,
                    chain,
                });
                return wallet;
            },
        });
    };
    return (_jsxs(View, { style: styles.container, children: [_jsx(View, { style: styles.searchContainer, children: _jsx(ThemedInput, { theme: theme, leftView: _jsx(View, { style: {
                            padding: spacing.sm,
                            width: 48,
                            flexDirection: "row",
                            justifyContent: "center",
                        }, children: _jsx(RNImage, { data: SEARCH_ICON, size: 24, theme: theme, color: theme.colors.secondaryIconColor }) }), placeholder: "Search Wallet", value: searchQuery, onChangeText: setSearchQuery }) }), _jsx(Spacer, { size: "md" }), _jsx(FlatList, { style: {
                    flex: 1,
                    paddingHorizontal: props.containerType === "modal" ? spacing.lg : 0,
                    paddingBottom: spacing.md,
                }, data: walletsToShow, renderItem: ({ item: walletId }) => (_jsx(ExternalWalletRow, { wallet: createWallet(walletId), connectWallet: connectWallet, theme: theme }, walletId)), keyExtractor: (walletId) => walletId, ItemSeparatorComponent: () => _jsx(View, { style: { height: spacing.md } }) })] }));
}
function ExternalWalletRow(props) {
    const { wallet, theme, connectWallet } = props;
    const imageQuery = useWalletImage(wallet.id);
    const infoQuery = useWalletInfo(wallet.id);
    return (_jsxs(TouchableOpacity, { style: styles.row, onPress: () => connectWallet(wallet), children: [imageQuery.data ? (_jsx(Image, { source: { uri: imageQuery.data ?? "" }, style: { width: 52, height: 52, borderRadius: 6 } })) : (_jsx(Skeleton, { theme: theme, style: {
                    width: 52,
                    height: 52,
                } })), _jsx(ThemedText, { theme: theme, type: "subtitle", children: infoQuery.data?.name || "" })] }));
}
function ShowAllWalletsRow(props) {
    const { theme, onPress } = props;
    return (_jsxs(TouchableOpacity, { style: styles.row, onPress: onPress, children: [_jsx(View, { style: {
                    width: 52,
                    height: 52,
                    flexDirection: "row",
                    flexWrap: "wrap",
                    justifyContent: "space-between",
                    alignContent: "space-between",
                    backgroundColor: theme.colors.secondaryButtonBg,
                    borderColor: theme.colors.borderColor,
                    borderWidth: 1,
                    padding: 8,
                    borderRadius: 6,
                }, children: [...Array(4)].map((_, index) => (_jsx(View
                // biome-ignore lint/suspicious/noArrayIndexKey: only have index as key
                , { style: {
                        width: 14,
                        height: 14,
                        borderRadius: 7,
                        backgroundColor: theme.colors.secondaryIconColor,
                    } }, index))) }), _jsx(ThemedText, { theme: theme, type: "subtitle", children: "Show all wallets" })] }));
}
function NewToWallets({ theme, containerType, }) {
    return (_jsxs(View, { style: [
            styles.row,
            {
                borderTopWidth: 1,
                borderColor: theme.colors.borderColor,
                paddingVertical: spacing.md,
                paddingHorizontal: containerType === "modal" ? spacing.lg : 0,
            },
        ], children: [_jsx(ThemedText, { theme: theme, type: "subtext", children: "New to wallets?" }), _jsx(View, { style: { flex: 1 } }), _jsx(ThemedText, { type: "subtext", style: { color: theme.colors.primaryText }, theme: theme, onPress: () => Linking.openURL("https://blog.thirdweb.com/web3-wallet/"), children: "Get started" })] }));
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: "column",
    },
    row: {
        flexDirection: "row",
        gap: spacing.md,
        justifyContent: "flex-start",
        alignItems: "center",
    },
    searchContainer: {
        flexDirection: "row",
        gap: spacing.md,
        justifyContent: "flex-start",
        alignItems: "center",
        paddingHorizontal: spacing.lg,
    },
});
//# sourceMappingURL=ExternalWalletsList.js.map